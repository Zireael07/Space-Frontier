[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D gradient: hint_black;

uniform vec2 NoiseScale1 = vec2(4, 3);
uniform vec2 NoiseScale2 = vec2(35, 35);
uniform vec2 NoiseScale3 = vec2(17, 17);

uniform float uTemperature = 0.0;
uniform float uWaterLevel = 0.2;

uniform vec4 uCold: hint_color = vec4(0.2, 0.4, 0.39, 1.0);
uniform vec4 uOcean: hint_color = vec4(0.01, 0.81, 1.0, 1.0);
uniform vec4 uTemperate: hint_color = vec4(0.3, 0.42, 0.26, 1.0);
uniform vec4 uWarm: hint_color = vec4(0.46, 0.55, 0.32, 1.0);
uniform vec4 uHot: hint_color = vec4(0.87, 0.75, 0.58, 1.0);

float map(float value, float inMin, float inMax, float outMin, float outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}


void fragment() {
	
	//get noise from texture
	vec4 noise1 = texture(TEXTURE, UV*NoiseScale1);
	vec4 noise2 = texture(TEXTURE, UV*NoiseScale2);
	vec4 noise3 = texture(TEXTURE, UV*NoiseScale3);
	
	//https://www.redblobgames.com/maps/terrain-from-noise/
	//Higher dimensional noise tends to have a narrower range of values than lower dimensional noise
	//so if your biome constants are tuned for 2D noise, then you can try multiplying noise3D by √1.5, and noise4D by √2
	float n2 = noise2.r * 0.05 * 1.41421356;
	float n = noise1.r + n2;
	float n3 = noise3.r;
	
	n = n * 1.41421356;
	//n2 = n2 * 1.41421356;
	n3 = n3 * 1.41421356;
	
	//default values
	vec3 col = vec3(0.0);
	float rivers = 0.;
	vec3 ice = vec3(250./255.0, 250./255.0, 250./255.0);
	
	float temp = texture(gradient, vec2(UV.y, 0.0)).r;
	//gradient goes from 0 to 1 and the biomes assume range of -1 to 1.5
	temp = map(temp, 0, 1, -1, 1.5);
	
	//mix in some noise
	temp = temp + (n3 *0.1) * n * 0.6 + uTemperature;
	
	//biomes based on Zarkonnen (https://github.com/Zarkonnen/GenGen)
	float ocean_fact = min(1.0, 1.0 - smoothstep(0.19, 0.2, n - uWaterLevel) + rivers * (1.0 - smoothstep(0.01, 0.04, mod(temp - UV.x * 35.0 + 0.3, 1.0) + n * n * 0.35))) * smoothstep(-0.9, -0.75, temp);

	float ice_fact = max(0.0, 1.0 + uWaterLevel - ocean_fact - smoothstep(-0.8, -0.6, temp));
	float cold_fact = max(0.0, 1.0 - ice_fact - ocean_fact - smoothstep(-0.4, 0.0, temp));
	float temperate_fact = max(0.0, 1.0 - ice_fact - cold_fact - ocean_fact - smoothstep(0.3, 0.8, temp));
	float warm_fact = max(0.0, 1.0 - ice_fact - cold_fact - temperate_fact - ocean_fact - smoothstep(1.05, 1.3, temp));
	float hot_fact = max(0.0, 1.0 - ocean_fact - ice_fact - cold_fact - temperate_fact - warm_fact);
	
	col = uOcean.rgb * ocean_fact + ice * ice_fact;
	
	vec3 biome_cols = uCold.rgb * cold_fact + uTemperate.rgb * temperate_fact + uWarm.rgb * warm_fact + uHot.rgb * hot_fact; 
	
	col = col + biome_cols;
	
	//temp visualization
	//col = mix(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), temp);
	
	//tint by temp
	col *= (0.7 + abs(temp + n * 0.2) * 0.3);
	// some color adjustments
	col *= 0.92 + step(0.1, mod(n2, 0.4)) * 0.08;
	//adds some slight texture
	col *= 1.0 + step(0.39, mod(n + UV.x, 0.4)) * 0.1;
	
	COLOR = vec4(col, 1.0);
	//COLOR = vec4(noise3);
}"
