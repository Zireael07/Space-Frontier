[gd_scene load_steps=11 format=3 uid="uid://drgokg8asj6mo"]

[ext_resource type="Shader" path="res://assets/blackhole/blackhole2D.gdshader" id="1"]
[ext_resource type="Script" path="res://bodies/blackhole2D.gd" id="2"]
[ext_resource type="Script" path="res://Nebula.gd" id="3"]

[sub_resource type="ShaderMaterial" id="3"]
shader = ExtResource("1")
shader_parameter/strength = 0.01
shader_parameter/black_radius = 0.65
shader_parameter/hole_color = Plane(0, 0, 0, 1)

[sub_resource type="ImageTexture" id="4"]

[sub_resource type="Shader" id="6"]
code = "shader_type canvas_item;

uniform vec2 offset;
uniform float scale;

uniform float density;
uniform float falloff;
uniform vec3 color;

uniform vec3 color2;

// GLSL textureless classic 2D noise \"cnoise\",
// with an RSL-style periodic variant \"pnoise\".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-08-22
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Classic Perlin noise
float cnoise(vec2 P) {
    vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod289(Pi); // To avoid truncation effects in permutation
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;

    vec4 i = permute(permute(ix) + iy);

    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
    vec4 gy = abs(gx) - 0.5 ;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;

    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);
    
    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;
    
    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));
    
    vec2 fade_xy = fade(Pf.xy);
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}

// Classic Perlin noise, periodic variant
float pnoise(vec2 P, vec2 rep) {
    vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod(Pi, vec4(rep, rep)); // To create noise with explicit period
    Pi = mod289(Pi); // To avoid truncation effects in permutation
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;
    
    vec4 i = permute(permute(ix) + iy);
    
    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
    vec4 gy = abs(gx) - 0.5 ;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;
    
    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);
    
    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;

    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));
    
    vec2 fade_xy = fade(Pf.xy);
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}

float normalnoise(vec2 p) {
     return cnoise(p) * 0.5 + 0.5;
}

float noise(vec2 p) {
    p += offset;
    int steps = 5;
    float n_scale = pow(2.0, float(steps));
    float displace = 0.0;
    for (int i = 0; i < steps; i++) {
        displace = normalnoise(p * n_scale + displace);
        n_scale *= 0.5;
    }
    return normalnoise(p + displace);
}


void fragment() {
	//tyro
	//float n = noise(UV*scale*1.0);
	float or_n = noise(FRAGCOORD.xy*scale *1.0);
	float n = pow(or_n + density, falloff);
	
	float col_n = noise(FRAGCOORD.xy*scale*0.5);
	
	vec3 col = mix(color, color2, col_n);
	//vec3 col = color + color2;
	
	//COLOR.rgb = col;
	float mixi = n;
	//float mixi = 1.0-(pow(n, density));
	//for aesthetic reasons, black (background) must not be a minority but be noticeable
	COLOR.rgb = mix(vec3(0.0), col, mixi);
	
	//blackhole
	//COLOR.rgb = mix(col, vec3(0,0,0), smoothstep(black_radius-0.01, black_radius+0.01, f));
	
    //COLOR.rgb = vec3(or_n);
}"

[sub_resource type="ShaderMaterial" id="1"]
resource_local_to_scene = true
shader = SubResource("6")
shader_parameter/offset = [38.2885, 51.6411]
shader_parameter/scale = 0.00108231
shader_parameter/density = 0.0237715
shader_parameter/falloff = 4.86349
shader_parameter/color = Vector3(0.295128, 0.0541246, 0.72836)
shader_parameter/color2 = Vector3(0.275238, 0.115777, 0.236459)

[sub_resource type="ImageTexture" id="2"]

[sub_resource type="CircleShape2D" id="5"]
radius = 30.0

[sub_resource type="RectangleShape2D" id="7"]
size = Vector2(175, 175)

[node name="Node2D" type="Node2D" groups=["wormhole"]]
z_index = 20
z_as_relative = false
script = ExtResource("2")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("3")
texture = SubResource("4")

[node name="Sprite2" type="Sprite2D" parent="."]
material = SubResource("1")
texture = SubResource("2")
script = ExtResource("3")

[node name="Area2D" type="Area2D" parent="."]
visible = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("5")

[node name="Area2D2" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D2"]
shape = SubResource("7")

[node name="Timer" type="Timer" parent="."]
one_shot = true
autostart = true

[connection signal="area_entered" from="Area2D" to="." method="_on_Area2D_area_entered"]
[connection signal="area_entered" from="Area2D2" to="." method="_on_Area2D2_area_entered"]
[connection signal="area_exited" from="Area2D2" to="." method="_on_Area2D2_area_exited"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
